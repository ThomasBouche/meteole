from __future__ import annotations

import logging
from typing import final

from meteole.clients import BaseClient, MeteoFranceClient
from meteole.forecast import WeatherForecast

logger = logging.getLogger(__name__)

AVAILABLE_AROME_TERRITORY: list[str] = [
    "FRANCE",
    "NCALED",
    "INDIEN",
    "POLYN",
    "GUYANE",
    "ANTIL",
]

AROME_INSTANT_INDICATORS: list[str] = [
    "BRIGHTNESS_TEMPERATURE__GROUND_OR_WATER_SURFACE",
    "BRIGHTNESS_TEMPERATURE_CHANNEL62__GROUND_OR_WATER_SURFACE",
    "INHIBITION_CONVECTIVE__GROUND_OR_WATER_SURFACE",
    "TOTAL_WATER_VAPOUR__GROUND_OR_WATER_SURFACE",
    "RELATIVE_DIVERGENCE__ISOBARIC_SURFACE",
    "RELATIVE_HUMIDITY__SPECIFIC_HEIGHT_LEVEL_ABOVE_GROUND",
    "RELATIVE_HUMIDITY__ISOBARIC_SURFACE",
    "LOW_CLOUD_COVER__GROUND_OR_WATER_SURFACE",
    "PRECIPITATION_TYPE_MOST_SEVERE__GROUND_OR_WATER_SURFACE",
    "PRECIPITATION_TYPE__GROUND_OR_WATER_SURFACE",
    "PRESSURE__MEAN_SEA_LEVEL",
    "REFLECTIVITY_MAXIMUM__GROUND_OR_WATER_SURFACE",
    "REFLECTIVITY_DBZ__ISOBARIC_SURFACE",
    "MAXIMUM_TEMPERATURE__SPECIFIC_HEIGHT_LEVEL_ABOVE_GROUND",
    "MINIMUM_TEMPERATURE__SPECIFIC_HEIGHT_LEVEL_ABOVE_GROUND",
    "PSEUDO_ADIABATIC_POTENTIAL_TEMPERATURE__ISOBARIC_SURFACE",
    "TEMPERATURE__GROUND_OR_WATER_SURFACE",
    "TEMPERATURE__SPECIFIC_HEIGHT_LEVEL_ABOVE_GROUND",
    "TEMPERATURE__ISOBARIC_SURFACE",
    "U_COMPONENT_OF_WIND_GUST__SPECIFIC_HEIGHT_LEVEL_ABOVE_GROUND",
    "U_COMPONENT_OF_WIND__SPECIFIC_HEIGHT_LEVEL_ABOVE_GROUND",
    "MINIMUM_VISIBILITY_PRECIPITATING_HYDROMETEORS__GROUND_OR_WATER_SURFACE",
    "MINIMUM_VISIBILITY_NON_PRECIPITATING_HYDROMETEORS__GROUND_OR_WATER_SURFACE",
    "VERTICAL_VELOCITY_PRESSURE__ISOBARIC_SURFACE",
    "V_COMPONENT_OF_WIND_GUST__SPECIFIC_HEIGHT_LEVEL_ABOVE_GROUND",
    "V_COMPONENT_OF_WIND__SPECIFIC_HEIGHT_LEVEL_ABOVE_GROUND",
    "GEOPOTENTIAL__ISOBARIC_SURFACE",
]

AROME_OTHER_INDICATORS: list[str] = [
    "TOTAL_WATER_PRECIPITATION__GROUND_OR_WATER_SURFACE",
    "TOTAL_GRAUPEL_PRECIPITATION__GROUND_OR_WATER_SURFACE",
    "LIGHTNING_DENSITY_CUMULATED__GROUND_OR_WATER_SURFACE",
    "TOTAL_SNOW_PRECIPITATION__GROUND_OR_WATER_SURFACE",
    "TOTAL_PRECIPITATION__GROUND_OR_WATER_SURFACE",
]


@final
class AromePEForecast(WeatherForecast):
    """Access the PE-AROME ensemble forecast data from Meteo-France API."""

    MODEL_NAME: str = "pearome"
    BASE_ENTRY_POINT: str = "wcs/MF-NWP-HIGHRES-PEARO" 
    MODEL_TYPE: str = "ENSEMBLE"
    ENSEMBLE_NUMBERS = 25
    DEFAULT_TERRITORY: str = "FRANCE"
    CLIENT_CLASS: type[BaseClient] = MeteoFranceClient
    INDICATORS: list[str] = AROME_INSTANT_INDICATORS + AROME_OTHER_INDICATORS
    INSTANT_INDICATORS: list[str] = AROME_INSTANT_INDICATORS

    def __init__(self, client=None, **kwargs):
        super().__init__(client, precision=0.025, **kwargs)

    def _validate_parameters(self) -> None:
        """Check the territory and the precision parameters.

        Raise:
            ValueError: At least, one parameter is not good.
        """
        if self.precision != 0.025:
            raise ValueError("Parameter `precision` must be 0.025")

        if self.territory not in AVAILABLE_AROME_TERRITORY:
            raise ValueError(f"Parameter `territory` must be in {AVAILABLE_AROME_TERRITORY}")